{"ast":null,"code":"import { all, put, takeLatest, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"../user/user.types\";\nimport { getCurrentUser, firestore } from \"../../firebase/firebase.utils\";\nimport { clearCart } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nexport function* clearCartOnSignOutSuccess() {\n  yield put(clearCart());\n}\nexport function* addCartToFirestoreAsync({\n  payload: items\n}) {\n  try {\n    const userAuth = yield getCurrentUser();\n    const userRef = yield firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = yield userRef.get();\n    const mapCartItems = yield items.map(item => item);\n    yield userRef.set({ ...snapshot.data(),\n      cartItems: mapCartItems\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchCartItemsFromFirestoreAsync() {\n  try {\n    const userAuth = yield getCurrentUser();\n    const userRef = yield firestore.col(`users/${userAuth.uid}/cartItems`);\n    yield put(console.log(userRef));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOutSuccess);\n}\nexport function* onAddCartToFirestoreStart() {\n  yield takeLatest(CartActionTypes.ADD_CART_TO_FIRESTORE_START, addCartToFirestoreAsync);\n}\nexport function* onFetchCartItemsFromFirestoreStart() {\n  yield takeLatest(CartActionTypes.FETCH_CART_ITEMS_FROM_FIRESTORE_START, fetchCartItemsFromFirestoreAsync);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onAddCartToFirestoreStart), call(onFetchCartItemsFromFirestoreStart)]);\n}","map":{"version":3,"sources":["/Users/michalwanto/Desktop/lesson-26-complete/client/src/redux/cart/cart.sagas.js"],"names":["all","put","takeLatest","call","UserActionTypes","getCurrentUser","firestore","clearCart","CartActionTypes","clearCartOnSignOutSuccess","addCartToFirestoreAsync","payload","items","userAuth","userRef","doc","uid","snapshot","get","mapCartItems","map","item","set","data","cartItems","error","console","log","fetchCartItemsFromFirestoreAsync","col","onSignOutSuccess","SIGN_OUT_SUCCESS","onAddCartToFirestoreStart","ADD_CART_TO_FIRESTORE_START","onFetchCartItemsFromFirestoreStart","FETCH_CART_ITEMS_FROM_FIRESTORE_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,+BAA1C;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,yBAAV,GAAsC;AAC3C,QAAMR,GAAG,CAACM,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUG,uBAAV,CAAkC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAlC,EAAsD;AAC3D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMR,cAAc,EAArC;AACA,UAAMS,OAAO,GAAG,MAAMR,SAAS,CAACS,GAAV,CAAe,SAAQF,QAAQ,CAACG,GAAI,EAApC,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;AACA,UAAMC,YAAY,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAUA,IAApB,CAA3B;AACA,UAAMP,OAAO,CAACQ,GAAR,CAAY,EAChB,GAAGL,QAAQ,CAACM,IAAT,EADa;AAEhBC,MAAAA,SAAS,EAAEL;AAFK,KAAZ,CAAN;AAID,GATD,CASE,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AAED,OAAO,UAAUG,gCAAV,GAA6C;AAClD,MAAI;AACF,UAAMf,QAAQ,GAAG,MAAMR,cAAc,EAArC;AACA,UAAMS,OAAO,GAAG,MAAMR,SAAS,CAACuB,GAAV,CAAe,SAAQhB,QAAQ,CAACG,GAAI,YAApC,CAAtB;AACA,UAAMf,GAAG,CAACyB,OAAO,CAACC,GAAR,CAAYb,OAAZ,CAAD,CAAT;AACD,GAJD,CAIE,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AAED,OAAO,UAAUK,gBAAV,GAA6B;AAClC,QAAM5B,UAAU,CAACE,eAAe,CAAC2B,gBAAjB,EAAmCtB,yBAAnC,CAAhB;AACD;AAED,OAAO,UAAUuB,yBAAV,GAAsC;AAC3C,QAAM9B,UAAU,CACdM,eAAe,CAACyB,2BADF,EAEdvB,uBAFc,CAAhB;AAID;AAED,OAAO,UAAUwB,kCAAV,GAA+C;AACpD,QAAMhC,UAAU,CACdM,eAAe,CAAC2B,qCADF,EAEdP,gCAFc,CAAhB;AAID;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CACRG,IAAI,CAAC2B,gBAAD,CADI,EAER3B,IAAI,CAAC6B,yBAAD,CAFI,EAGR7B,IAAI,CAAC+B,kCAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, put, takeLatest, call } from \"redux-saga/effects\";\n\nimport UserActionTypes from \"../user/user.types\";\n\nimport { getCurrentUser, firestore } from \"../../firebase/firebase.utils\";\n\nimport { clearCart } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\n\nexport function* clearCartOnSignOutSuccess() {\n  yield put(clearCart());\n}\n\nexport function* addCartToFirestoreAsync({ payload: items }) {\n  try {\n    const userAuth = yield getCurrentUser();\n    const userRef = yield firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = yield userRef.get();\n    const mapCartItems = yield items.map((item) => item);\n    yield userRef.set({\n      ...snapshot.data(),\n      cartItems: mapCartItems,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* fetchCartItemsFromFirestoreAsync() {\n  try {\n    const userAuth = yield getCurrentUser();\n    const userRef = yield firestore.col(`users/${userAuth.uid}/cartItems`);\n    yield put(console.log(userRef));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOutSuccess);\n}\n\nexport function* onAddCartToFirestoreStart() {\n  yield takeLatest(\n    CartActionTypes.ADD_CART_TO_FIRESTORE_START,\n    addCartToFirestoreAsync\n  );\n}\n\nexport function* onFetchCartItemsFromFirestoreStart() {\n  yield takeLatest(\n    CartActionTypes.FETCH_CART_ITEMS_FROM_FIRESTORE_START,\n    fetchCartItemsFromFirestoreAsync\n  );\n}\n\nexport function* cartSagas() {\n  yield all([\n    call(onSignOutSuccess),\n    call(onAddCartToFirestoreStart),\n    call(onFetchCartItemsFromFirestoreStart),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}