{"ast":null,"code":"import { all, put, takeLatest, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"../user/user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* checkCurrentUser() {\n  takeLatest(UserActionTypes.CHECK_CURRENT_USER, isUserAuthenticated);\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: snapshot.id,\n      ...snapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogleStart() {\n  yield takeLatest(UserActionTypes.SIGN_IN_WITH_GOOGLE_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure);\n  }\n}\nexport function* signInWithEmailStart() {\n  yield takeLatest(UserActionTypes.SIGN_IN_WITH_EMAIL_START, signInWithEmail);\n}\nexport function* userSaga() {\n  yield all([call(signInWithGoogleStart), call(signInWithEmailStart)]);\n}","map":{"version":3,"sources":["/Users/michalwanto/Desktop/lesson-26-complete/src/redux/user/user.saga.js"],"names":["all","put","takeLatest","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","isUserAuthenticated","userAuth","getSnapshotFromUserAuth","error","checkCurrentUser","CHECK_CURRENT_USER","userRef","snapshot","get","id","data","signInWithGoogle","user","signInWithPopup","signInWithGoogleStart","SIGN_IN_WITH_GOOGLE_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signInWithEmailStart","SIGN_IN_WITH_EMAIL_START","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAOA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,cAAc,EAArC;;AACA,QAAI,CAACI,QAAL,EAAe;AACb;AACA,YAAMC,uBAAuB,CAACD,QAAD,CAA7B;AACD;AACF,GAND,CAME,OAAOE,KAAP,EAAc;AACd,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClCb,EAAAA,UAAU,CAACE,eAAe,CAACY,kBAAjB,EAAqCL,mBAArC,CAAV;AACD;AAED,OAAO,UAAUE,uBAAV,CAAkCD,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMK,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAMM,QAAQ,GAAG,MAAMD,OAAO,CAACE,GAAR,EAAvB;AACA,UAAMlB,GAAG,CAACQ,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,QAAQ,CAACE,EAAf;AAAmB,SAAGF,QAAQ,CAACG,IAAT;AAAtB,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOP,KAAP,EAAc;AACd,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUQ,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,IAAI,CAACmB,eAAL,CAAqBlB,cAArB,CAAvB;AACA,UAAMO,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOT,KAAP,EAAc;AACd,UAAMb,GAAG,CAACS,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUW,qBAAV,GAAkC;AACvC,QAAMvB,UAAU,CAACE,eAAe,CAACsB,yBAAjB,EAA4CJ,gBAA5C,CAAhB;AACD;AAED,OAAO,UAAUK,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMlB,IAAI,CAAC0B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMjB,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOT,KAAP,EAAc;AACd,UAAMb,GAAG,CAACS,aAAD,CAAT;AACD;AACF;AACD,OAAO,UAAUsB,oBAAV,GAAiC;AACtC,QAAM9B,UAAU,CAACE,eAAe,CAAC6B,wBAAjB,EAA2CN,eAA3C,CAAhB;AACD;AAED,OAAO,UAAUO,QAAV,GAAqB;AAC1B,QAAMlC,GAAG,CAAC,CAACG,IAAI,CAACsB,qBAAD,CAAL,EAA8BtB,IAAI,CAAC6B,oBAAD,CAAlC,CAAD,CAAT;AACD","sourcesContent":["import { all, put, takeLatest, call } from \"redux-saga/effects\";\n\nimport UserActionTypes from \"../user/user.types\";\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\n\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) {\n      return;\n      yield getSnapshotFromUserAuth(userAuth);\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* checkCurrentUser() {\n  takeLatest(UserActionTypes.CHECK_CURRENT_USER, isUserAuthenticated);\n}\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const snapshot = yield userRef.get();\n    yield put(signInSuccess({ id: snapshot.id, ...snapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogleStart() {\n  yield takeLatest(UserActionTypes.SIGN_IN_WITH_GOOGLE_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure);\n  }\n}\nexport function* signInWithEmailStart() {\n  yield takeLatest(UserActionTypes.SIGN_IN_WITH_EMAIL_START, signInWithEmail);\n}\n\nexport function* userSaga() {\n  yield all([call(signInWithGoogleStart), call(signInWithEmailStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}